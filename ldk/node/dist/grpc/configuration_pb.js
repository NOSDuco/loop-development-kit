"use strict";
// source: configuration.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var session_pb = require('./session_pb.js');
goog.object.extend(proto, session_pb);
goog.exportSymbol('proto.proto.ConfigurationDeleteRequest', null, global);
goog.exportSymbol('proto.proto.ConfigurationExistsRequest', null, global);
goog.exportSymbol('proto.proto.ConfigurationExistsResponse', null, global);
goog.exportSymbol('proto.proto.ConfigurationReadRequest', null, global);
goog.exportSymbol('proto.proto.ConfigurationReadResponse', null, global);
goog.exportSymbol('proto.proto.ConfigurationWriteRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ConfigurationExistsRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ConfigurationExistsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.ConfigurationExistsRequest.displayName = 'proto.proto.ConfigurationExistsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ConfigurationExistsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ConfigurationExistsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.ConfigurationExistsResponse.displayName = 'proto.proto.ConfigurationExistsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ConfigurationReadRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ConfigurationReadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.ConfigurationReadRequest.displayName = 'proto.proto.ConfigurationReadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ConfigurationReadResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ConfigurationReadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.ConfigurationReadResponse.displayName = 'proto.proto.ConfigurationReadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ConfigurationDeleteRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ConfigurationDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.ConfigurationDeleteRequest.displayName = 'proto.proto.ConfigurationDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ConfigurationWriteRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ConfigurationWriteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.ConfigurationWriteRequest.displayName = 'proto.proto.ConfigurationWriteRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.ConfigurationExistsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.ConfigurationExistsRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.ConfigurationExistsRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.ConfigurationExistsRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
            key: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ConfigurationExistsRequest}
 */
proto.proto.ConfigurationExistsRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.ConfigurationExistsRequest;
    return proto.proto.ConfigurationExistsRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ConfigurationExistsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ConfigurationExistsRequest}
 */
proto.proto.ConfigurationExistsRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new session_pb.Session;
                reader.readMessage(value, session_pb.Session.deserializeBinaryFromReader);
                msg.setSession(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ConfigurationExistsRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.ConfigurationExistsRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ConfigurationExistsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ConfigurationExistsRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSession();
    if (f != null) {
        writer.writeMessage(1, f, session_pb.Session.serializeBinaryToWriter);
    }
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.ConfigurationExistsRequest.prototype.getSession = function () {
    return /** @type{?proto.proto.Session} */ (jspb.Message.getWrapperField(this, session_pb.Session, 1));
};
/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.ConfigurationExistsRequest} returns this
*/
proto.proto.ConfigurationExistsRequest.prototype.setSession = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ConfigurationExistsRequest} returns this
 */
proto.proto.ConfigurationExistsRequest.prototype.clearSession = function () {
    return this.setSession(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ConfigurationExistsRequest.prototype.hasSession = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string key = 2;
 * @return {string}
 */
proto.proto.ConfigurationExistsRequest.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.ConfigurationExistsRequest} returns this
 */
proto.proto.ConfigurationExistsRequest.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.ConfigurationExistsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.ConfigurationExistsResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.ConfigurationExistsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.ConfigurationExistsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            exists: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ConfigurationExistsResponse}
 */
proto.proto.ConfigurationExistsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.ConfigurationExistsResponse;
    return proto.proto.ConfigurationExistsResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ConfigurationExistsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ConfigurationExistsResponse}
 */
proto.proto.ConfigurationExistsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setExists(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ConfigurationExistsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.ConfigurationExistsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ConfigurationExistsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ConfigurationExistsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getExists();
    if (f) {
        writer.writeBool(1, f);
    }
};
/**
 * optional bool exists = 1;
 * @return {boolean}
 */
proto.proto.ConfigurationExistsResponse.prototype.getExists = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.ConfigurationExistsResponse} returns this
 */
proto.proto.ConfigurationExistsResponse.prototype.setExists = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.ConfigurationReadRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.ConfigurationReadRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.ConfigurationReadRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.ConfigurationReadRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
            key: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ConfigurationReadRequest}
 */
proto.proto.ConfigurationReadRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.ConfigurationReadRequest;
    return proto.proto.ConfigurationReadRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ConfigurationReadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ConfigurationReadRequest}
 */
proto.proto.ConfigurationReadRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new session_pb.Session;
                reader.readMessage(value, session_pb.Session.deserializeBinaryFromReader);
                msg.setSession(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ConfigurationReadRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.ConfigurationReadRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ConfigurationReadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ConfigurationReadRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSession();
    if (f != null) {
        writer.writeMessage(1, f, session_pb.Session.serializeBinaryToWriter);
    }
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.ConfigurationReadRequest.prototype.getSession = function () {
    return /** @type{?proto.proto.Session} */ (jspb.Message.getWrapperField(this, session_pb.Session, 1));
};
/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.ConfigurationReadRequest} returns this
*/
proto.proto.ConfigurationReadRequest.prototype.setSession = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ConfigurationReadRequest} returns this
 */
proto.proto.ConfigurationReadRequest.prototype.clearSession = function () {
    return this.setSession(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ConfigurationReadRequest.prototype.hasSession = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string key = 2;
 * @return {string}
 */
proto.proto.ConfigurationReadRequest.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.ConfigurationReadRequest} returns this
 */
proto.proto.ConfigurationReadRequest.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.ConfigurationReadResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.ConfigurationReadResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.ConfigurationReadResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.ConfigurationReadResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ConfigurationReadResponse}
 */
proto.proto.ConfigurationReadResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.ConfigurationReadResponse;
    return proto.proto.ConfigurationReadResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ConfigurationReadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ConfigurationReadResponse}
 */
proto.proto.ConfigurationReadResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ConfigurationReadResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.ConfigurationReadResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ConfigurationReadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ConfigurationReadResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string value = 1;
 * @return {string}
 */
proto.proto.ConfigurationReadResponse.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.ConfigurationReadResponse} returns this
 */
proto.proto.ConfigurationReadResponse.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.ConfigurationDeleteRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.ConfigurationDeleteRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.ConfigurationDeleteRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.ConfigurationDeleteRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
            key: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ConfigurationDeleteRequest}
 */
proto.proto.ConfigurationDeleteRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.ConfigurationDeleteRequest;
    return proto.proto.ConfigurationDeleteRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ConfigurationDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ConfigurationDeleteRequest}
 */
proto.proto.ConfigurationDeleteRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new session_pb.Session;
                reader.readMessage(value, session_pb.Session.deserializeBinaryFromReader);
                msg.setSession(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ConfigurationDeleteRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.ConfigurationDeleteRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ConfigurationDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ConfigurationDeleteRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSession();
    if (f != null) {
        writer.writeMessage(1, f, session_pb.Session.serializeBinaryToWriter);
    }
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.ConfigurationDeleteRequest.prototype.getSession = function () {
    return /** @type{?proto.proto.Session} */ (jspb.Message.getWrapperField(this, session_pb.Session, 1));
};
/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.ConfigurationDeleteRequest} returns this
*/
proto.proto.ConfigurationDeleteRequest.prototype.setSession = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ConfigurationDeleteRequest} returns this
 */
proto.proto.ConfigurationDeleteRequest.prototype.clearSession = function () {
    return this.setSession(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ConfigurationDeleteRequest.prototype.hasSession = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string key = 2;
 * @return {string}
 */
proto.proto.ConfigurationDeleteRequest.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.ConfigurationDeleteRequest} returns this
 */
proto.proto.ConfigurationDeleteRequest.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.ConfigurationWriteRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.ConfigurationWriteRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.ConfigurationWriteRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.ConfigurationWriteRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
            key: jspb.Message.getFieldWithDefault(msg, 2, ""),
            value: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ConfigurationWriteRequest}
 */
proto.proto.ConfigurationWriteRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.ConfigurationWriteRequest;
    return proto.proto.ConfigurationWriteRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ConfigurationWriteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ConfigurationWriteRequest}
 */
proto.proto.ConfigurationWriteRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new session_pb.Session;
                reader.readMessage(value, session_pb.Session.deserializeBinaryFromReader);
                msg.setSession(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ConfigurationWriteRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.ConfigurationWriteRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ConfigurationWriteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ConfigurationWriteRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSession();
    if (f != null) {
        writer.writeMessage(1, f, session_pb.Session.serializeBinaryToWriter);
    }
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.ConfigurationWriteRequest.prototype.getSession = function () {
    return /** @type{?proto.proto.Session} */ (jspb.Message.getWrapperField(this, session_pb.Session, 1));
};
/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.ConfigurationWriteRequest} returns this
*/
proto.proto.ConfigurationWriteRequest.prototype.setSession = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ConfigurationWriteRequest} returns this
 */
proto.proto.ConfigurationWriteRequest.prototype.clearSession = function () {
    return this.setSession(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ConfigurationWriteRequest.prototype.hasSession = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string key = 2;
 * @return {string}
 */
proto.proto.ConfigurationWriteRequest.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.ConfigurationWriteRequest} returns this
 */
proto.proto.ConfigurationWriteRequest.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string value = 3;
 * @return {string}
 */
proto.proto.ConfigurationWriteRequest.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.ConfigurationWriteRequest} returns this
 */
proto.proto.ConfigurationWriteRequest.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
goog.object.extend(exports, proto.proto);
