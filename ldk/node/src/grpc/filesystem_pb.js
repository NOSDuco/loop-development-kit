// source: filesystem.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var session_pb = require('./session_pb.js');
goog.object.extend(proto, session_pb);
goog.exportSymbol('proto.proto.FileAction', null, global);
goog.exportSymbol('proto.proto.FileInfo', null, global);
goog.exportSymbol('proto.proto.FilesystemCopyRequest', null, global);
goog.exportSymbol('proto.proto.FilesystemDirRequest', null, global);
goog.exportSymbol('proto.proto.FilesystemDirResponse', null, global);
goog.exportSymbol('proto.proto.FilesystemDirStreamRequest', null, global);
goog.exportSymbol('proto.proto.FilesystemDirStreamResponse', null, global);
goog.exportSymbol('proto.proto.FilesystemFileInfoStreamRequest', null, global);
goog.exportSymbol('proto.proto.FilesystemFileInfoStreamResponse', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamRequest', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamRequest.Chmod', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamRequest.Chown', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamRequest.Close', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamRequest.Create', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamRequest.Open', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamRequest.Read', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamRequest.RequestoneofCase', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamRequest.Stat', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamRequest.Write', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamResponse', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamResponse.Chmod', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamResponse.Chown', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamResponse.Read', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamResponse.ResponseoneofCase', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamResponse.Stat', null, global);
goog.exportSymbol('proto.proto.FilesystemFileStreamResponse.Write', null, global);
goog.exportSymbol('proto.proto.FilesystemMakeDirRequest', null, global);
goog.exportSymbol('proto.proto.FilesystemMoveRequest', null, global);
goog.exportSymbol('proto.proto.FilesystemRemoveRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FileInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FileInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FileInfo.displayName = 'proto.proto.FileInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemDirRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemDirRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemDirRequest.displayName = 'proto.proto.FilesystemDirRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemDirResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.FilesystemDirResponse.repeatedFields_, null);
};
goog.inherits(proto.proto.FilesystemDirResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemDirResponse.displayName = 'proto.proto.FilesystemDirResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemDirStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemDirStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemDirStreamRequest.displayName = 'proto.proto.FilesystemDirStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemDirStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemDirStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemDirStreamResponse.displayName = 'proto.proto.FilesystemDirStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileInfoStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileInfoStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileInfoStreamRequest.displayName = 'proto.proto.FilesystemFileInfoStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileInfoStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileInfoStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileInfoStreamResponse.displayName = 'proto.proto.FilesystemFileInfoStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.FilesystemFileStreamRequest.oneofGroups_);
};
goog.inherits(proto.proto.FilesystemFileStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamRequest.displayName = 'proto.proto.FilesystemFileStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamRequest.Open = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamRequest.Open, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamRequest.Open.displayName = 'proto.proto.FilesystemFileStreamRequest.Open';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamRequest.Create = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamRequest.Create, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamRequest.Create.displayName = 'proto.proto.FilesystemFileStreamRequest.Create';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamRequest.Write = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamRequest.Write, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamRequest.Write.displayName = 'proto.proto.FilesystemFileStreamRequest.Write';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamRequest.Read = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamRequest.Read, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamRequest.Read.displayName = 'proto.proto.FilesystemFileStreamRequest.Read';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamRequest.Close = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamRequest.Close, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamRequest.Close.displayName = 'proto.proto.FilesystemFileStreamRequest.Close';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamRequest.Chmod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamRequest.Chmod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamRequest.Chmod.displayName = 'proto.proto.FilesystemFileStreamRequest.Chmod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamRequest.Chown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamRequest.Chown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamRequest.Chown.displayName = 'proto.proto.FilesystemFileStreamRequest.Chown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamRequest.Stat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamRequest.Stat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamRequest.Stat.displayName = 'proto.proto.FilesystemFileStreamRequest.Stat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.FilesystemFileStreamResponse.oneofGroups_);
};
goog.inherits(proto.proto.FilesystemFileStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamResponse.displayName = 'proto.proto.FilesystemFileStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamResponse.Read = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamResponse.Read, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamResponse.Read.displayName = 'proto.proto.FilesystemFileStreamResponse.Read';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamResponse.Write = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamResponse.Write, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamResponse.Write.displayName = 'proto.proto.FilesystemFileStreamResponse.Write';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamResponse.Chmod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamResponse.Chmod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamResponse.Chmod.displayName = 'proto.proto.FilesystemFileStreamResponse.Chmod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamResponse.Chown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamResponse.Chown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamResponse.Chown.displayName = 'proto.proto.FilesystemFileStreamResponse.Chown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemFileStreamResponse.Stat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemFileStreamResponse.Stat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemFileStreamResponse.Stat.displayName = 'proto.proto.FilesystemFileStreamResponse.Stat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemMakeDirRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemMakeDirRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemMakeDirRequest.displayName = 'proto.proto.FilesystemMakeDirRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemCopyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemCopyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemCopyRequest.displayName = 'proto.proto.FilesystemCopyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemMoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemMoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemMoveRequest.displayName = 'proto.proto.FilesystemMoveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FilesystemRemoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FilesystemRemoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FilesystemRemoveRequest.displayName = 'proto.proto.FilesystemRemoveRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FileInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FileInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FileInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FileInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    updated: (f = msg.getUpdated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    isdir: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FileInfo}
 */
proto.proto.FileInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FileInfo;
  return proto.proto.FileInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FileInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FileInfo}
 */
proto.proto.FileInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMode(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdated(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FileInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FileInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FileInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FileInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUpdated();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getIsdir();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.FileInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FileInfo} returns this
 */
proto.proto.FileInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 size = 2;
 * @return {number}
 */
proto.proto.FileInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FileInfo} returns this
 */
proto.proto.FileInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 mode = 3;
 * @return {number}
 */
proto.proto.FileInfo.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FileInfo} returns this
 */
proto.proto.FileInfo.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp updated = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.proto.FileInfo.prototype.getUpdated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.proto.FileInfo} returns this
*/
proto.proto.FileInfo.prototype.setUpdated = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FileInfo} returns this
 */
proto.proto.FileInfo.prototype.clearUpdated = function() {
  return this.setUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FileInfo.prototype.hasUpdated = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool isDir = 5;
 * @return {boolean}
 */
proto.proto.FileInfo.prototype.getIsdir = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.FileInfo} returns this
 */
proto.proto.FileInfo.prototype.setIsdir = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemDirRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemDirRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemDirRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemDirRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
    directory: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemDirRequest}
 */
proto.proto.FilesystemDirRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemDirRequest;
  return proto.proto.FilesystemDirRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemDirRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemDirRequest}
 */
proto.proto.FilesystemDirRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new session_pb.Session;
      reader.readMessage(value,session_pb.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemDirRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemDirRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemDirRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemDirRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      session_pb.Session.serializeBinaryToWriter
    );
  }
  f = message.getDirectory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.FilesystemDirRequest.prototype.getSession = function() {
  return /** @type{?proto.proto.Session} */ (
    jspb.Message.getWrapperField(this, session_pb.Session, 1));
};


/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.FilesystemDirRequest} returns this
*/
proto.proto.FilesystemDirRequest.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemDirRequest} returns this
 */
proto.proto.FilesystemDirRequest.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemDirRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string directory = 2;
 * @return {string}
 */
proto.proto.FilesystemDirRequest.prototype.getDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemDirRequest} returns this
 */
proto.proto.FilesystemDirRequest.prototype.setDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.FilesystemDirResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemDirResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemDirResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemDirResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemDirResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    filesList: jspb.Message.toObjectList(msg.getFilesList(),
    proto.proto.FileInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemDirResponse}
 */
proto.proto.FilesystemDirResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemDirResponse;
  return proto.proto.FilesystemDirResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemDirResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemDirResponse}
 */
proto.proto.FilesystemDirResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.FileInfo;
      reader.readMessage(value,proto.proto.FileInfo.deserializeBinaryFromReader);
      msg.addFiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemDirResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemDirResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemDirResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemDirResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.FileInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FileInfo files = 1;
 * @return {!Array<!proto.proto.FileInfo>}
 */
proto.proto.FilesystemDirResponse.prototype.getFilesList = function() {
  return /** @type{!Array<!proto.proto.FileInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.FileInfo, 1));
};


/**
 * @param {!Array<!proto.proto.FileInfo>} value
 * @return {!proto.proto.FilesystemDirResponse} returns this
*/
proto.proto.FilesystemDirResponse.prototype.setFilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.FileInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.FileInfo}
 */
proto.proto.FilesystemDirResponse.prototype.addFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.FileInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.FilesystemDirResponse} returns this
 */
proto.proto.FilesystemDirResponse.prototype.clearFilesList = function() {
  return this.setFilesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemDirStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemDirStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemDirStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemDirStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
    directory: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemDirStreamRequest}
 */
proto.proto.FilesystemDirStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemDirStreamRequest;
  return proto.proto.FilesystemDirStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemDirStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemDirStreamRequest}
 */
proto.proto.FilesystemDirStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new session_pb.Session;
      reader.readMessage(value,session_pb.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirectory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemDirStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemDirStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemDirStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemDirStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      session_pb.Session.serializeBinaryToWriter
    );
  }
  f = message.getDirectory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.FilesystemDirStreamRequest.prototype.getSession = function() {
  return /** @type{?proto.proto.Session} */ (
    jspb.Message.getWrapperField(this, session_pb.Session, 1));
};


/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.FilesystemDirStreamRequest} returns this
*/
proto.proto.FilesystemDirStreamRequest.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemDirStreamRequest} returns this
 */
proto.proto.FilesystemDirStreamRequest.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemDirStreamRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string directory = 2;
 * @return {string}
 */
proto.proto.FilesystemDirStreamRequest.prototype.getDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemDirStreamRequest} returns this
 */
proto.proto.FilesystemDirStreamRequest.prototype.setDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemDirStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemDirStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemDirStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemDirStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    file: (f = msg.getFile()) && proto.proto.FileInfo.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemDirStreamResponse}
 */
proto.proto.FilesystemDirStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemDirStreamResponse;
  return proto.proto.FilesystemDirStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemDirStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemDirStreamResponse}
 */
proto.proto.FilesystemDirStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.FileInfo;
      reader.readMessage(value,proto.proto.FileInfo.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.FileAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemDirStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemDirStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemDirStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemDirStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.FileInfo.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional FileInfo file = 1;
 * @return {?proto.proto.FileInfo}
 */
proto.proto.FilesystemDirStreamResponse.prototype.getFile = function() {
  return /** @type{?proto.proto.FileInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.FileInfo, 1));
};


/**
 * @param {?proto.proto.FileInfo|undefined} value
 * @return {!proto.proto.FilesystemDirStreamResponse} returns this
*/
proto.proto.FilesystemDirStreamResponse.prototype.setFile = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemDirStreamResponse} returns this
 */
proto.proto.FilesystemDirStreamResponse.prototype.clearFile = function() {
  return this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemDirStreamResponse.prototype.hasFile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FileAction action = 2;
 * @return {!proto.proto.FileAction}
 */
proto.proto.FilesystemDirStreamResponse.prototype.getAction = function() {
  return /** @type {!proto.proto.FileAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.proto.FileAction} value
 * @return {!proto.proto.FilesystemDirStreamResponse} returns this
 */
proto.proto.FilesystemDirStreamResponse.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string error = 15;
 * @return {string}
 */
proto.proto.FilesystemDirStreamResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemDirStreamResponse} returns this
 */
proto.proto.FilesystemDirStreamResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileInfoStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileInfoStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileInfoStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileInfoStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
    path: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileInfoStreamRequest}
 */
proto.proto.FilesystemFileInfoStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileInfoStreamRequest;
  return proto.proto.FilesystemFileInfoStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileInfoStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileInfoStreamRequest}
 */
proto.proto.FilesystemFileInfoStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new session_pb.Session;
      reader.readMessage(value,session_pb.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileInfoStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileInfoStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileInfoStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileInfoStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      session_pb.Session.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.FilesystemFileInfoStreamRequest.prototype.getSession = function() {
  return /** @type{?proto.proto.Session} */ (
    jspb.Message.getWrapperField(this, session_pb.Session, 1));
};


/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.FilesystemFileInfoStreamRequest} returns this
*/
proto.proto.FilesystemFileInfoStreamRequest.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileInfoStreamRequest} returns this
 */
proto.proto.FilesystemFileInfoStreamRequest.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileInfoStreamRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.proto.FilesystemFileInfoStreamRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemFileInfoStreamRequest} returns this
 */
proto.proto.FilesystemFileInfoStreamRequest.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileInfoStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileInfoStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileInfoStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileInfoStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    file: (f = msg.getFile()) && proto.proto.FileInfo.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileInfoStreamResponse}
 */
proto.proto.FilesystemFileInfoStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileInfoStreamResponse;
  return proto.proto.FilesystemFileInfoStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileInfoStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileInfoStreamResponse}
 */
proto.proto.FilesystemFileInfoStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.FileInfo;
      reader.readMessage(value,proto.proto.FileInfo.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.FileAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileInfoStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileInfoStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileInfoStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileInfoStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.FileInfo.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional FileInfo file = 1;
 * @return {?proto.proto.FileInfo}
 */
proto.proto.FilesystemFileInfoStreamResponse.prototype.getFile = function() {
  return /** @type{?proto.proto.FileInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.FileInfo, 1));
};


/**
 * @param {?proto.proto.FileInfo|undefined} value
 * @return {!proto.proto.FilesystemFileInfoStreamResponse} returns this
*/
proto.proto.FilesystemFileInfoStreamResponse.prototype.setFile = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileInfoStreamResponse} returns this
 */
proto.proto.FilesystemFileInfoStreamResponse.prototype.clearFile = function() {
  return this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileInfoStreamResponse.prototype.hasFile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FileAction action = 2;
 * @return {!proto.proto.FileAction}
 */
proto.proto.FilesystemFileInfoStreamResponse.prototype.getAction = function() {
  return /** @type {!proto.proto.FileAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.proto.FileAction} value
 * @return {!proto.proto.FilesystemFileInfoStreamResponse} returns this
 */
proto.proto.FilesystemFileInfoStreamResponse.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string error = 15;
 * @return {string}
 */
proto.proto.FilesystemFileInfoStreamResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemFileInfoStreamResponse} returns this
 */
proto.proto.FilesystemFileInfoStreamResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.FilesystemFileStreamRequest.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.proto.FilesystemFileStreamRequest.RequestoneofCase = {
  REQUESTONEOF_NOT_SET: 0,
  CREATE: 1,
  OPEN: 2,
  READ: 3,
  WRITE: 4,
  CHMOD: 5,
  CHOWN: 6,
  STAT: 7,
  CLOSE: 8
};

/**
 * @return {proto.proto.FilesystemFileStreamRequest.RequestoneofCase}
 */
proto.proto.FilesystemFileStreamRequest.prototype.getRequestoneofCase = function() {
  return /** @type {proto.proto.FilesystemFileStreamRequest.RequestoneofCase} */(jspb.Message.computeOneofCase(this, proto.proto.FilesystemFileStreamRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    create: (f = msg.getCreate()) && proto.proto.FilesystemFileStreamRequest.Create.toObject(includeInstance, f),
    open: (f = msg.getOpen()) && proto.proto.FilesystemFileStreamRequest.Open.toObject(includeInstance, f),
    read: (f = msg.getRead()) && proto.proto.FilesystemFileStreamRequest.Read.toObject(includeInstance, f),
    write: (f = msg.getWrite()) && proto.proto.FilesystemFileStreamRequest.Write.toObject(includeInstance, f),
    chmod: (f = msg.getChmod()) && proto.proto.FilesystemFileStreamRequest.Chmod.toObject(includeInstance, f),
    chown: (f = msg.getChown()) && proto.proto.FilesystemFileStreamRequest.Chown.toObject(includeInstance, f),
    stat: (f = msg.getStat()) && proto.proto.FilesystemFileStreamRequest.Stat.toObject(includeInstance, f),
    close: (f = msg.getClose()) && proto.proto.FilesystemFileStreamRequest.Close.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamRequest}
 */
proto.proto.FilesystemFileStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamRequest;
  return proto.proto.FilesystemFileStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamRequest}
 */
proto.proto.FilesystemFileStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.FilesystemFileStreamRequest.Create;
      reader.readMessage(value,proto.proto.FilesystemFileStreamRequest.Create.deserializeBinaryFromReader);
      msg.setCreate(value);
      break;
    case 2:
      var value = new proto.proto.FilesystemFileStreamRequest.Open;
      reader.readMessage(value,proto.proto.FilesystemFileStreamRequest.Open.deserializeBinaryFromReader);
      msg.setOpen(value);
      break;
    case 3:
      var value = new proto.proto.FilesystemFileStreamRequest.Read;
      reader.readMessage(value,proto.proto.FilesystemFileStreamRequest.Read.deserializeBinaryFromReader);
      msg.setRead(value);
      break;
    case 4:
      var value = new proto.proto.FilesystemFileStreamRequest.Write;
      reader.readMessage(value,proto.proto.FilesystemFileStreamRequest.Write.deserializeBinaryFromReader);
      msg.setWrite(value);
      break;
    case 5:
      var value = new proto.proto.FilesystemFileStreamRequest.Chmod;
      reader.readMessage(value,proto.proto.FilesystemFileStreamRequest.Chmod.deserializeBinaryFromReader);
      msg.setChmod(value);
      break;
    case 6:
      var value = new proto.proto.FilesystemFileStreamRequest.Chown;
      reader.readMessage(value,proto.proto.FilesystemFileStreamRequest.Chown.deserializeBinaryFromReader);
      msg.setChown(value);
      break;
    case 7:
      var value = new proto.proto.FilesystemFileStreamRequest.Stat;
      reader.readMessage(value,proto.proto.FilesystemFileStreamRequest.Stat.deserializeBinaryFromReader);
      msg.setStat(value);
      break;
    case 8:
      var value = new proto.proto.FilesystemFileStreamRequest.Close;
      reader.readMessage(value,proto.proto.FilesystemFileStreamRequest.Close.deserializeBinaryFromReader);
      msg.setClose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.FilesystemFileStreamRequest.Create.serializeBinaryToWriter
    );
  }
  f = message.getOpen();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.FilesystemFileStreamRequest.Open.serializeBinaryToWriter
    );
  }
  f = message.getRead();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.FilesystemFileStreamRequest.Read.serializeBinaryToWriter
    );
  }
  f = message.getWrite();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.FilesystemFileStreamRequest.Write.serializeBinaryToWriter
    );
  }
  f = message.getChmod();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.FilesystemFileStreamRequest.Chmod.serializeBinaryToWriter
    );
  }
  f = message.getChown();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.FilesystemFileStreamRequest.Chown.serializeBinaryToWriter
    );
  }
  f = message.getStat();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.proto.FilesystemFileStreamRequest.Stat.serializeBinaryToWriter
    );
  }
  f = message.getClose();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.proto.FilesystemFileStreamRequest.Close.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamRequest.Open.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamRequest.Open.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamRequest.Open} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Open.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
    path: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamRequest.Open}
 */
proto.proto.FilesystemFileStreamRequest.Open.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamRequest.Open;
  return proto.proto.FilesystemFileStreamRequest.Open.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamRequest.Open} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamRequest.Open}
 */
proto.proto.FilesystemFileStreamRequest.Open.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new session_pb.Session;
      reader.readMessage(value,session_pb.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamRequest.Open.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamRequest.Open.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamRequest.Open} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Open.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      session_pb.Session.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.FilesystemFileStreamRequest.Open.prototype.getSession = function() {
  return /** @type{?proto.proto.Session} */ (
    jspb.Message.getWrapperField(this, session_pb.Session, 1));
};


/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.FilesystemFileStreamRequest.Open} returns this
*/
proto.proto.FilesystemFileStreamRequest.Open.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamRequest.Open} returns this
 */
proto.proto.FilesystemFileStreamRequest.Open.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamRequest.Open.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.proto.FilesystemFileStreamRequest.Open.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemFileStreamRequest.Open} returns this
 */
proto.proto.FilesystemFileStreamRequest.Open.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamRequest.Create.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamRequest.Create.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamRequest.Create} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Create.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
    path: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamRequest.Create}
 */
proto.proto.FilesystemFileStreamRequest.Create.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamRequest.Create;
  return proto.proto.FilesystemFileStreamRequest.Create.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamRequest.Create} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamRequest.Create}
 */
proto.proto.FilesystemFileStreamRequest.Create.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new session_pb.Session;
      reader.readMessage(value,session_pb.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamRequest.Create.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamRequest.Create.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamRequest.Create} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Create.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      session_pb.Session.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.FilesystemFileStreamRequest.Create.prototype.getSession = function() {
  return /** @type{?proto.proto.Session} */ (
    jspb.Message.getWrapperField(this, session_pb.Session, 1));
};


/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.FilesystemFileStreamRequest.Create} returns this
*/
proto.proto.FilesystemFileStreamRequest.Create.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamRequest.Create} returns this
 */
proto.proto.FilesystemFileStreamRequest.Create.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamRequest.Create.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.proto.FilesystemFileStreamRequest.Create.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemFileStreamRequest.Create} returns this
 */
proto.proto.FilesystemFileStreamRequest.Create.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamRequest.Write.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamRequest.Write.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamRequest.Write} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Write.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamRequest.Write}
 */
proto.proto.FilesystemFileStreamRequest.Write.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamRequest.Write;
  return proto.proto.FilesystemFileStreamRequest.Write.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamRequest.Write} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamRequest.Write}
 */
proto.proto.FilesystemFileStreamRequest.Write.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamRequest.Write.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamRequest.Write.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamRequest.Write} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Write.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.FilesystemFileStreamRequest.Write.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.proto.FilesystemFileStreamRequest.Write.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamRequest.Write.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.FilesystemFileStreamRequest.Write} returns this
 */
proto.proto.FilesystemFileStreamRequest.Write.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamRequest.Read.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamRequest.Read.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamRequest.Read} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Read.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamRequest.Read}
 */
proto.proto.FilesystemFileStreamRequest.Read.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamRequest.Read;
  return proto.proto.FilesystemFileStreamRequest.Read.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamRequest.Read} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamRequest.Read}
 */
proto.proto.FilesystemFileStreamRequest.Read.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamRequest.Read.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamRequest.Read.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamRequest.Read} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Read.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamRequest.Close.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamRequest.Close.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamRequest.Close} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Close.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamRequest.Close}
 */
proto.proto.FilesystemFileStreamRequest.Close.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamRequest.Close;
  return proto.proto.FilesystemFileStreamRequest.Close.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamRequest.Close} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamRequest.Close}
 */
proto.proto.FilesystemFileStreamRequest.Close.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamRequest.Close.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamRequest.Close.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamRequest.Close} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Close.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamRequest.Chmod.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamRequest.Chmod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamRequest.Chmod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Chmod.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamRequest.Chmod}
 */
proto.proto.FilesystemFileStreamRequest.Chmod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamRequest.Chmod;
  return proto.proto.FilesystemFileStreamRequest.Chmod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamRequest.Chmod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamRequest.Chmod}
 */
proto.proto.FilesystemFileStreamRequest.Chmod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamRequest.Chmod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamRequest.Chmod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamRequest.Chmod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Chmod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 mode = 1;
 * @return {number}
 */
proto.proto.FilesystemFileStreamRequest.Chmod.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FilesystemFileStreamRequest.Chmod} returns this
 */
proto.proto.FilesystemFileStreamRequest.Chmod.prototype.setMode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamRequest.Chown.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamRequest.Chown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamRequest.Chown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Chown.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamRequest.Chown}
 */
proto.proto.FilesystemFileStreamRequest.Chown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamRequest.Chown;
  return proto.proto.FilesystemFileStreamRequest.Chown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamRequest.Chown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamRequest.Chown}
 */
proto.proto.FilesystemFileStreamRequest.Chown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamRequest.Chown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamRequest.Chown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamRequest.Chown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Chown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 uid = 1;
 * @return {number}
 */
proto.proto.FilesystemFileStreamRequest.Chown.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FilesystemFileStreamRequest.Chown} returns this
 */
proto.proto.FilesystemFileStreamRequest.Chown.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 gid = 2;
 * @return {number}
 */
proto.proto.FilesystemFileStreamRequest.Chown.prototype.getGid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FilesystemFileStreamRequest.Chown} returns this
 */
proto.proto.FilesystemFileStreamRequest.Chown.prototype.setGid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamRequest.Stat.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamRequest.Stat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamRequest.Stat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Stat.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamRequest.Stat}
 */
proto.proto.FilesystemFileStreamRequest.Stat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamRequest.Stat;
  return proto.proto.FilesystemFileStreamRequest.Stat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamRequest.Stat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamRequest.Stat}
 */
proto.proto.FilesystemFileStreamRequest.Stat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamRequest.Stat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamRequest.Stat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamRequest.Stat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamRequest.Stat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional Create create = 1;
 * @return {?proto.proto.FilesystemFileStreamRequest.Create}
 */
proto.proto.FilesystemFileStreamRequest.prototype.getCreate = function() {
  return /** @type{?proto.proto.FilesystemFileStreamRequest.Create} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamRequest.Create, 1));
};


/**
 * @param {?proto.proto.FilesystemFileStreamRequest.Create|undefined} value
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
*/
proto.proto.FilesystemFileStreamRequest.prototype.setCreate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.proto.FilesystemFileStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
 */
proto.proto.FilesystemFileStreamRequest.prototype.clearCreate = function() {
  return this.setCreate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamRequest.prototype.hasCreate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Open open = 2;
 * @return {?proto.proto.FilesystemFileStreamRequest.Open}
 */
proto.proto.FilesystemFileStreamRequest.prototype.getOpen = function() {
  return /** @type{?proto.proto.FilesystemFileStreamRequest.Open} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamRequest.Open, 2));
};


/**
 * @param {?proto.proto.FilesystemFileStreamRequest.Open|undefined} value
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
*/
proto.proto.FilesystemFileStreamRequest.prototype.setOpen = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.FilesystemFileStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
 */
proto.proto.FilesystemFileStreamRequest.prototype.clearOpen = function() {
  return this.setOpen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamRequest.prototype.hasOpen = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Read read = 3;
 * @return {?proto.proto.FilesystemFileStreamRequest.Read}
 */
proto.proto.FilesystemFileStreamRequest.prototype.getRead = function() {
  return /** @type{?proto.proto.FilesystemFileStreamRequest.Read} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamRequest.Read, 3));
};


/**
 * @param {?proto.proto.FilesystemFileStreamRequest.Read|undefined} value
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
*/
proto.proto.FilesystemFileStreamRequest.prototype.setRead = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.FilesystemFileStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
 */
proto.proto.FilesystemFileStreamRequest.prototype.clearRead = function() {
  return this.setRead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamRequest.prototype.hasRead = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Write write = 4;
 * @return {?proto.proto.FilesystemFileStreamRequest.Write}
 */
proto.proto.FilesystemFileStreamRequest.prototype.getWrite = function() {
  return /** @type{?proto.proto.FilesystemFileStreamRequest.Write} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamRequest.Write, 4));
};


/**
 * @param {?proto.proto.FilesystemFileStreamRequest.Write|undefined} value
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
*/
proto.proto.FilesystemFileStreamRequest.prototype.setWrite = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.proto.FilesystemFileStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
 */
proto.proto.FilesystemFileStreamRequest.prototype.clearWrite = function() {
  return this.setWrite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamRequest.prototype.hasWrite = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Chmod chmod = 5;
 * @return {?proto.proto.FilesystemFileStreamRequest.Chmod}
 */
proto.proto.FilesystemFileStreamRequest.prototype.getChmod = function() {
  return /** @type{?proto.proto.FilesystemFileStreamRequest.Chmod} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamRequest.Chmod, 5));
};


/**
 * @param {?proto.proto.FilesystemFileStreamRequest.Chmod|undefined} value
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
*/
proto.proto.FilesystemFileStreamRequest.prototype.setChmod = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.proto.FilesystemFileStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
 */
proto.proto.FilesystemFileStreamRequest.prototype.clearChmod = function() {
  return this.setChmod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamRequest.prototype.hasChmod = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Chown chown = 6;
 * @return {?proto.proto.FilesystemFileStreamRequest.Chown}
 */
proto.proto.FilesystemFileStreamRequest.prototype.getChown = function() {
  return /** @type{?proto.proto.FilesystemFileStreamRequest.Chown} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamRequest.Chown, 6));
};


/**
 * @param {?proto.proto.FilesystemFileStreamRequest.Chown|undefined} value
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
*/
proto.proto.FilesystemFileStreamRequest.prototype.setChown = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.proto.FilesystemFileStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
 */
proto.proto.FilesystemFileStreamRequest.prototype.clearChown = function() {
  return this.setChown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamRequest.prototype.hasChown = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Stat stat = 7;
 * @return {?proto.proto.FilesystemFileStreamRequest.Stat}
 */
proto.proto.FilesystemFileStreamRequest.prototype.getStat = function() {
  return /** @type{?proto.proto.FilesystemFileStreamRequest.Stat} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamRequest.Stat, 7));
};


/**
 * @param {?proto.proto.FilesystemFileStreamRequest.Stat|undefined} value
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
*/
proto.proto.FilesystemFileStreamRequest.prototype.setStat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.proto.FilesystemFileStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
 */
proto.proto.FilesystemFileStreamRequest.prototype.clearStat = function() {
  return this.setStat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamRequest.prototype.hasStat = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Close close = 8;
 * @return {?proto.proto.FilesystemFileStreamRequest.Close}
 */
proto.proto.FilesystemFileStreamRequest.prototype.getClose = function() {
  return /** @type{?proto.proto.FilesystemFileStreamRequest.Close} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamRequest.Close, 8));
};


/**
 * @param {?proto.proto.FilesystemFileStreamRequest.Close|undefined} value
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
*/
proto.proto.FilesystemFileStreamRequest.prototype.setClose = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.proto.FilesystemFileStreamRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamRequest} returns this
 */
proto.proto.FilesystemFileStreamRequest.prototype.clearClose = function() {
  return this.setClose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamRequest.prototype.hasClose = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.FilesystemFileStreamResponse.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.proto.FilesystemFileStreamResponse.ResponseoneofCase = {
  RESPONSEONEOF_NOT_SET: 0,
  READ: 1,
  WRITE: 2,
  CHMOD: 3,
  CHOWN: 4,
  STAT: 5
};

/**
 * @return {proto.proto.FilesystemFileStreamResponse.ResponseoneofCase}
 */
proto.proto.FilesystemFileStreamResponse.prototype.getResponseoneofCase = function() {
  return /** @type {proto.proto.FilesystemFileStreamResponse.ResponseoneofCase} */(jspb.Message.computeOneofCase(this, proto.proto.FilesystemFileStreamResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    read: (f = msg.getRead()) && proto.proto.FilesystemFileStreamResponse.Read.toObject(includeInstance, f),
    write: (f = msg.getWrite()) && proto.proto.FilesystemFileStreamResponse.Write.toObject(includeInstance, f),
    chmod: (f = msg.getChmod()) && proto.proto.FilesystemFileStreamResponse.Chmod.toObject(includeInstance, f),
    chown: (f = msg.getChown()) && proto.proto.FilesystemFileStreamResponse.Chown.toObject(includeInstance, f),
    stat: (f = msg.getStat()) && proto.proto.FilesystemFileStreamResponse.Stat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamResponse}
 */
proto.proto.FilesystemFileStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamResponse;
  return proto.proto.FilesystemFileStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamResponse}
 */
proto.proto.FilesystemFileStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.FilesystemFileStreamResponse.Read;
      reader.readMessage(value,proto.proto.FilesystemFileStreamResponse.Read.deserializeBinaryFromReader);
      msg.setRead(value);
      break;
    case 2:
      var value = new proto.proto.FilesystemFileStreamResponse.Write;
      reader.readMessage(value,proto.proto.FilesystemFileStreamResponse.Write.deserializeBinaryFromReader);
      msg.setWrite(value);
      break;
    case 3:
      var value = new proto.proto.FilesystemFileStreamResponse.Chmod;
      reader.readMessage(value,proto.proto.FilesystemFileStreamResponse.Chmod.deserializeBinaryFromReader);
      msg.setChmod(value);
      break;
    case 4:
      var value = new proto.proto.FilesystemFileStreamResponse.Chown;
      reader.readMessage(value,proto.proto.FilesystemFileStreamResponse.Chown.deserializeBinaryFromReader);
      msg.setChown(value);
      break;
    case 5:
      var value = new proto.proto.FilesystemFileStreamResponse.Stat;
      reader.readMessage(value,proto.proto.FilesystemFileStreamResponse.Stat.deserializeBinaryFromReader);
      msg.setStat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRead();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.FilesystemFileStreamResponse.Read.serializeBinaryToWriter
    );
  }
  f = message.getWrite();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.FilesystemFileStreamResponse.Write.serializeBinaryToWriter
    );
  }
  f = message.getChmod();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.FilesystemFileStreamResponse.Chmod.serializeBinaryToWriter
    );
  }
  f = message.getChown();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.FilesystemFileStreamResponse.Chown.serializeBinaryToWriter
    );
  }
  f = message.getStat();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.FilesystemFileStreamResponse.Stat.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamResponse.Read.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamResponse.Read.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamResponse.Read} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.Read.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    error: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamResponse.Read}
 */
proto.proto.FilesystemFileStreamResponse.Read.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamResponse.Read;
  return proto.proto.FilesystemFileStreamResponse.Read.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamResponse.Read} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamResponse.Read}
 */
proto.proto.FilesystemFileStreamResponse.Read.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamResponse.Read.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamResponse.Read.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamResponse.Read} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.Read.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.FilesystemFileStreamResponse.Read.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.proto.FilesystemFileStreamResponse.Read.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamResponse.Read.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.FilesystemFileStreamResponse.Read} returns this
 */
proto.proto.FilesystemFileStreamResponse.Read.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string error = 15;
 * @return {string}
 */
proto.proto.FilesystemFileStreamResponse.Read.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemFileStreamResponse.Read} returns this
 */
proto.proto.FilesystemFileStreamResponse.Read.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamResponse.Write.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamResponse.Write.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamResponse.Write} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.Write.toObject = function(includeInstance, msg) {
  var f, obj = {
    numofbytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamResponse.Write}
 */
proto.proto.FilesystemFileStreamResponse.Write.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamResponse.Write;
  return proto.proto.FilesystemFileStreamResponse.Write.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamResponse.Write} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamResponse.Write}
 */
proto.proto.FilesystemFileStreamResponse.Write.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumofbytes(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamResponse.Write.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamResponse.Write.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamResponse.Write} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.Write.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumofbytes();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional int32 numOfBytes = 1;
 * @return {number}
 */
proto.proto.FilesystemFileStreamResponse.Write.prototype.getNumofbytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FilesystemFileStreamResponse.Write} returns this
 */
proto.proto.FilesystemFileStreamResponse.Write.prototype.setNumofbytes = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string error = 15;
 * @return {string}
 */
proto.proto.FilesystemFileStreamResponse.Write.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemFileStreamResponse.Write} returns this
 */
proto.proto.FilesystemFileStreamResponse.Write.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamResponse.Chmod.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamResponse.Chmod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamResponse.Chmod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.Chmod.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamResponse.Chmod}
 */
proto.proto.FilesystemFileStreamResponse.Chmod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamResponse.Chmod;
  return proto.proto.FilesystemFileStreamResponse.Chmod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamResponse.Chmod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamResponse.Chmod}
 */
proto.proto.FilesystemFileStreamResponse.Chmod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamResponse.Chmod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamResponse.Chmod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamResponse.Chmod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.Chmod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string error = 15;
 * @return {string}
 */
proto.proto.FilesystemFileStreamResponse.Chmod.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemFileStreamResponse.Chmod} returns this
 */
proto.proto.FilesystemFileStreamResponse.Chmod.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamResponse.Chown.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamResponse.Chown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamResponse.Chown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.Chown.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamResponse.Chown}
 */
proto.proto.FilesystemFileStreamResponse.Chown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamResponse.Chown;
  return proto.proto.FilesystemFileStreamResponse.Chown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamResponse.Chown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamResponse.Chown}
 */
proto.proto.FilesystemFileStreamResponse.Chown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamResponse.Chown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamResponse.Chown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamResponse.Chown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.Chown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string error = 15;
 * @return {string}
 */
proto.proto.FilesystemFileStreamResponse.Chown.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemFileStreamResponse.Chown} returns this
 */
proto.proto.FilesystemFileStreamResponse.Chown.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemFileStreamResponse.Stat.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemFileStreamResponse.Stat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemFileStreamResponse.Stat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.Stat.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.proto.FileInfo.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemFileStreamResponse.Stat}
 */
proto.proto.FilesystemFileStreamResponse.Stat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemFileStreamResponse.Stat;
  return proto.proto.FilesystemFileStreamResponse.Stat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemFileStreamResponse.Stat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemFileStreamResponse.Stat}
 */
proto.proto.FilesystemFileStreamResponse.Stat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.FileInfo;
      reader.readMessage(value,proto.proto.FileInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemFileStreamResponse.Stat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemFileStreamResponse.Stat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemFileStreamResponse.Stat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemFileStreamResponse.Stat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.FileInfo.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional FileInfo info = 1;
 * @return {?proto.proto.FileInfo}
 */
proto.proto.FilesystemFileStreamResponse.Stat.prototype.getInfo = function() {
  return /** @type{?proto.proto.FileInfo} */ (
    jspb.Message.getWrapperField(this, proto.proto.FileInfo, 1));
};


/**
 * @param {?proto.proto.FileInfo|undefined} value
 * @return {!proto.proto.FilesystemFileStreamResponse.Stat} returns this
*/
proto.proto.FilesystemFileStreamResponse.Stat.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamResponse.Stat} returns this
 */
proto.proto.FilesystemFileStreamResponse.Stat.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamResponse.Stat.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error = 15;
 * @return {string}
 */
proto.proto.FilesystemFileStreamResponse.Stat.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemFileStreamResponse.Stat} returns this
 */
proto.proto.FilesystemFileStreamResponse.Stat.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional Read read = 1;
 * @return {?proto.proto.FilesystemFileStreamResponse.Read}
 */
proto.proto.FilesystemFileStreamResponse.prototype.getRead = function() {
  return /** @type{?proto.proto.FilesystemFileStreamResponse.Read} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamResponse.Read, 1));
};


/**
 * @param {?proto.proto.FilesystemFileStreamResponse.Read|undefined} value
 * @return {!proto.proto.FilesystemFileStreamResponse} returns this
*/
proto.proto.FilesystemFileStreamResponse.prototype.setRead = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.proto.FilesystemFileStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamResponse} returns this
 */
proto.proto.FilesystemFileStreamResponse.prototype.clearRead = function() {
  return this.setRead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamResponse.prototype.hasRead = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Write write = 2;
 * @return {?proto.proto.FilesystemFileStreamResponse.Write}
 */
proto.proto.FilesystemFileStreamResponse.prototype.getWrite = function() {
  return /** @type{?proto.proto.FilesystemFileStreamResponse.Write} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamResponse.Write, 2));
};


/**
 * @param {?proto.proto.FilesystemFileStreamResponse.Write|undefined} value
 * @return {!proto.proto.FilesystemFileStreamResponse} returns this
*/
proto.proto.FilesystemFileStreamResponse.prototype.setWrite = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.FilesystemFileStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamResponse} returns this
 */
proto.proto.FilesystemFileStreamResponse.prototype.clearWrite = function() {
  return this.setWrite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamResponse.prototype.hasWrite = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Chmod chmod = 3;
 * @return {?proto.proto.FilesystemFileStreamResponse.Chmod}
 */
proto.proto.FilesystemFileStreamResponse.prototype.getChmod = function() {
  return /** @type{?proto.proto.FilesystemFileStreamResponse.Chmod} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamResponse.Chmod, 3));
};


/**
 * @param {?proto.proto.FilesystemFileStreamResponse.Chmod|undefined} value
 * @return {!proto.proto.FilesystemFileStreamResponse} returns this
*/
proto.proto.FilesystemFileStreamResponse.prototype.setChmod = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.FilesystemFileStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamResponse} returns this
 */
proto.proto.FilesystemFileStreamResponse.prototype.clearChmod = function() {
  return this.setChmod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamResponse.prototype.hasChmod = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Chown chown = 4;
 * @return {?proto.proto.FilesystemFileStreamResponse.Chown}
 */
proto.proto.FilesystemFileStreamResponse.prototype.getChown = function() {
  return /** @type{?proto.proto.FilesystemFileStreamResponse.Chown} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamResponse.Chown, 4));
};


/**
 * @param {?proto.proto.FilesystemFileStreamResponse.Chown|undefined} value
 * @return {!proto.proto.FilesystemFileStreamResponse} returns this
*/
proto.proto.FilesystemFileStreamResponse.prototype.setChown = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.proto.FilesystemFileStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamResponse} returns this
 */
proto.proto.FilesystemFileStreamResponse.prototype.clearChown = function() {
  return this.setChown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamResponse.prototype.hasChown = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Stat stat = 5;
 * @return {?proto.proto.FilesystemFileStreamResponse.Stat}
 */
proto.proto.FilesystemFileStreamResponse.prototype.getStat = function() {
  return /** @type{?proto.proto.FilesystemFileStreamResponse.Stat} */ (
    jspb.Message.getWrapperField(this, proto.proto.FilesystemFileStreamResponse.Stat, 5));
};


/**
 * @param {?proto.proto.FilesystemFileStreamResponse.Stat|undefined} value
 * @return {!proto.proto.FilesystemFileStreamResponse} returns this
*/
proto.proto.FilesystemFileStreamResponse.prototype.setStat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.proto.FilesystemFileStreamResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemFileStreamResponse} returns this
 */
proto.proto.FilesystemFileStreamResponse.prototype.clearStat = function() {
  return this.setStat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemFileStreamResponse.prototype.hasStat = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemMakeDirRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemMakeDirRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemMakeDirRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemMakeDirRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    perm: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemMakeDirRequest}
 */
proto.proto.FilesystemMakeDirRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemMakeDirRequest;
  return proto.proto.FilesystemMakeDirRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemMakeDirRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemMakeDirRequest}
 */
proto.proto.FilesystemMakeDirRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new session_pb.Session;
      reader.readMessage(value,session_pb.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPerm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemMakeDirRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemMakeDirRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemMakeDirRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemMakeDirRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      session_pb.Session.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPerm();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.FilesystemMakeDirRequest.prototype.getSession = function() {
  return /** @type{?proto.proto.Session} */ (
    jspb.Message.getWrapperField(this, session_pb.Session, 1));
};


/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.FilesystemMakeDirRequest} returns this
*/
proto.proto.FilesystemMakeDirRequest.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemMakeDirRequest} returns this
 */
proto.proto.FilesystemMakeDirRequest.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemMakeDirRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.proto.FilesystemMakeDirRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemMakeDirRequest} returns this
 */
proto.proto.FilesystemMakeDirRequest.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 perm = 3;
 * @return {number}
 */
proto.proto.FilesystemMakeDirRequest.prototype.getPerm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FilesystemMakeDirRequest} returns this
 */
proto.proto.FilesystemMakeDirRequest.prototype.setPerm = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemCopyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemCopyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemCopyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemCopyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
    source: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemCopyRequest}
 */
proto.proto.FilesystemCopyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemCopyRequest;
  return proto.proto.FilesystemCopyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemCopyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemCopyRequest}
 */
proto.proto.FilesystemCopyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new session_pb.Session;
      reader.readMessage(value,session_pb.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemCopyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemCopyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemCopyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemCopyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      session_pb.Session.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.FilesystemCopyRequest.prototype.getSession = function() {
  return /** @type{?proto.proto.Session} */ (
    jspb.Message.getWrapperField(this, session_pb.Session, 1));
};


/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.FilesystemCopyRequest} returns this
*/
proto.proto.FilesystemCopyRequest.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemCopyRequest} returns this
 */
proto.proto.FilesystemCopyRequest.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemCopyRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string source = 2;
 * @return {string}
 */
proto.proto.FilesystemCopyRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemCopyRequest} returns this
 */
proto.proto.FilesystemCopyRequest.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dest = 3;
 * @return {string}
 */
proto.proto.FilesystemCopyRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemCopyRequest} returns this
 */
proto.proto.FilesystemCopyRequest.prototype.setDest = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemMoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemMoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemMoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemMoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
    source: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemMoveRequest}
 */
proto.proto.FilesystemMoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemMoveRequest;
  return proto.proto.FilesystemMoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemMoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemMoveRequest}
 */
proto.proto.FilesystemMoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new session_pb.Session;
      reader.readMessage(value,session_pb.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemMoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemMoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemMoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemMoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      session_pb.Session.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.FilesystemMoveRequest.prototype.getSession = function() {
  return /** @type{?proto.proto.Session} */ (
    jspb.Message.getWrapperField(this, session_pb.Session, 1));
};


/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.FilesystemMoveRequest} returns this
*/
proto.proto.FilesystemMoveRequest.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemMoveRequest} returns this
 */
proto.proto.FilesystemMoveRequest.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemMoveRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string source = 2;
 * @return {string}
 */
proto.proto.FilesystemMoveRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemMoveRequest} returns this
 */
proto.proto.FilesystemMoveRequest.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dest = 3;
 * @return {string}
 */
proto.proto.FilesystemMoveRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemMoveRequest} returns this
 */
proto.proto.FilesystemMoveRequest.prototype.setDest = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FilesystemRemoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FilesystemRemoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FilesystemRemoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemRemoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    recursive: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FilesystemRemoveRequest}
 */
proto.proto.FilesystemRemoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FilesystemRemoveRequest;
  return proto.proto.FilesystemRemoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FilesystemRemoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FilesystemRemoveRequest}
 */
proto.proto.FilesystemRemoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new session_pb.Session;
      reader.readMessage(value,session_pb.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRecursive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FilesystemRemoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FilesystemRemoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FilesystemRemoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FilesystemRemoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      session_pb.Session.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRecursive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.FilesystemRemoveRequest.prototype.getSession = function() {
  return /** @type{?proto.proto.Session} */ (
    jspb.Message.getWrapperField(this, session_pb.Session, 1));
};


/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.FilesystemRemoveRequest} returns this
*/
proto.proto.FilesystemRemoveRequest.prototype.setSession = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FilesystemRemoveRequest} returns this
 */
proto.proto.FilesystemRemoveRequest.prototype.clearSession = function() {
  return this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FilesystemRemoveRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.proto.FilesystemRemoveRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.FilesystemRemoveRequest} returns this
 */
proto.proto.FilesystemRemoveRequest.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool recursive = 3;
 * @return {boolean}
 */
proto.proto.FilesystemRemoveRequest.prototype.getRecursive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.FilesystemRemoveRequest} returns this
 */
proto.proto.FilesystemRemoveRequest.prototype.setRecursive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.proto.FileAction = {
  FILE_ACTION_UNKNOWN: 0,
  FILE_ACTION_CREATE: 1,
  FILE_ACTION_WRITE: 2,
  FILE_ACTION_REMOVE: 3,
  FILE_ACTION_RENAME: 4,
  FILE_ACTION_CHMOD: 5
};

goog.object.extend(exports, proto.proto);
